

var Task = React.createClass({
  rawMarkup: function() {
    var md = new Remarkable();
    var rawMarkup = md.render(this.props.children.toString());
    return { __html: rawMarkup };
  },

  render: function() {
    return (
      <p>
     
          {this.props.author}
     
        <span dangerouslySetInnerHTML={this.rawMarkup()} />
      </p>
    );
  }
});

var TaskCheckbox = React.createClass({
  getInitialState: function() {
    //console.log("initial state");
    return {complete: false};
  },
  handleChange: function(e) {
    console.log('changed');
    console.log(!this.state.complete);
    console.log(this.props.taskId);
    this.setState({complete: !this.state.complete});

     //if(this.state.complete)
      $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      type: 'PUT',
      data: {taskId: this.props.taskId, complete:!this.state.complete},
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
//https://facebook.github.io/react/docs/thinking-in-react.html#step-3-identify-the-minimal-but-complete-representation-of-ui-state
  render: function() {
    return (
        <input type="checkbox" checked={this.state.complete} onChange={this.handleChange} />
      );
  }
});

var TaskBox = React.createClass({
  loadTasksFromServer: function() {
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      cache: false,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  handleTaskSubmit: function(task) {
    var tasks = this.state.data;
    // Optimistically set an id on the new comment. It will be replaced by an
    // id generated by the server. In a production application you would likely
    // not use Date.now() for this and would have a more robust system in place.
    task.id = Date.now();
    var newTasks = tasks.concat([task]);
    this.setState({data: newTasks});
    $.ajax({
      url: this.props.url,
      dataType: 'json',
      type: 'POST',
      data: task,
      success: function(data) {
        this.setState({data: data});
      }.bind(this),
      error: function(xhr, status, err) {
        this.setState({data: tasks});
        console.error(this.props.url, status, err.toString());
      }.bind(this)
    });
  },
  getInitialState: function() {
    return {data: []};
  },
  componentDidMount: function() {
    this.loadTasksFromServer();
    setInterval(this.loadTasksFromServer, this.props.pollInterval);
  },
  render: function() {
    return (
      <div className="taskBox">
        <h1>stARt (Agile Results) Day List</h1>
        <TaskList data={this.state.data} />
        <TaskForm onTaskSubmit={this.handleTaskSubmit} />

      </div>
    );
  }
});

var TaskList = React.createClass({
  render: function() {
    var taskNodes = this.props.data.map(function(task) {
      return (
        <div key={task.id}>
          <Task author={task.author} >
            {task.text}
          </Task>
          <TaskCheckbox url="/api/tasks" taskId={task.id}/>
          <hr />
        </div>
      );
    });
    return (
      <div className="taskList">
        {taskNodes}
      </div>
    );
  }
});

var TaskForm = React.createClass({
  getInitialState: function() {
    return {author: '', text: ''};
  },
  handleAuthorChange: function(e) {
    this.setState({author: e.target.value});
  },
  handleTextChange: function(e) {
    this.setState({text: e.target.value});
  },
  handleSubmit: function(e) {
    e.preventDefault();
    var author = this.state.author.trim();
    var text = this.state.text.trim();
    if (!text || !author) {
      return;
    }
    this.props.onTaskSubmit({author: author, text: text});
    this.setState({author: '', text: ''});
  },
  render: function() {
    return (
      <form className="taskForm" onSubmit={this.handleSubmit}>
        <input
          type="text"
          placeholder="Task..."
          value={this.state.author}
          onChange={this.handleAuthorChange}
        />
        <input
          type="text"
          placeholder="Context..."
          value={this.state.text}
          onChange={this.handleTextChange}
        />
        <input type="submit" value="Post" />
      </form>
    );
  }
});

ReactDOM.render(
  <TaskBox url="/api/tasks" pollInterval={200000} />,
  document.getElementById('content')
);
